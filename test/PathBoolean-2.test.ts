import { describe, it, expect } from 'vitest';
import { Path } from '../src/path/Path';
import { CompoundPath } from '../src/path/CompoundPath';
import { PathConstructors } from '../src/path/PathConstructors';
import { Point } from '../src/basic/Point';
import { Size } from '../src/basic/Size';
import { Rectangle } from '../src/basic/Rectangle';
import { Segment } from '../src/path/Segment';
import { PathItem } from '../src/path/PathItem'; // PathItemをインポート

// Helper functions (assuming they are available or defined as in PathBoolean.test.ts)
function compareBoolean(actualFn: () => any, expected: any, message?: string, options?: any) {
  const actual = typeof actualFn === 'function' ? actualFn() : actualFn;
  if (expected && typeof expected === 'object' && 'pathData' in expected && typeof actual === 'object' && 'pathData' in actual) {
    expect(actual.pathData).toBe(expected.pathData);
  } else if (typeof actual === 'object' && actual && 'pathData' in actual && typeof expected === 'string') {
    expect(actual.pathData).toBe(expected);
  } else if (actual instanceof Path && expected instanceof Path && actual.isEmpty() && expected.isEmpty()) {
    expect(true).toBe(true);
  } else {
    // Ensure comparison is meaningful, convert to string as a fallback
    const actualStr = actual?.toString() ?? String(actual);
    const expectedStr = expected?.toString() ?? String(expected);
    expect(actualStr).toBe(expectedStr);
  }
}

function equals(actualFn: () => any, expected: any, message?: string) {
  const actual = typeof actualFn === 'function' ? actualFn() : actualFn;
  if (Array.isArray(actual) && Array.isArray(expected)) {
    expect(actual).toEqual(expected);
  } else {
    expect(actual).toBe(expected);
  }
}

// Helper to convert array to Segment array
function segmentsFromArray(arr: any[]): Segment[] {
    return arr.map(s => {
        if (!Array.isArray(s)) { // Handle cases where s might not be an array (e.g., Segment object)
            if (s instanceof Segment) return s;
            // Handle other potential non-array types if necessary
            console.warn("Unexpected segment data format:", s);
            return new Segment(new Point(0,0)); // Default fallback
        }
        if (s.length === 2 && typeof s[0] === 'number' && typeof s[1] === 'number') return new Segment(new Point(s[0], s[1]));
        if (s.length === 4 && typeof s[0] === 'number') return new Segment(new Point(s[0], s[1]), new Point(s[2], s[3]), null); // Assuming handleIn if 4
        if (s.length === 6 && typeof s[0] === 'number') return new Segment(new Point(s[0], s[1]), new Point(s[2], s[3]), new Point(s[4], s[5]));
        if (s.length === 3 && Array.isArray(s[0])) { // For #1036 format [[[x,y],[hix,hiy],[hox,hoy]], ...]
            const p = s[0];
            const hi = s[1];
            const ho = s[2];
            return new Segment(new Point(p[0],p[1]), new Point(hi[0],hi[1]), new Point(ho[0],ho[1]));
        }
        // Fallback for simple points or potentially malformed data
        if (typeof s[0] === 'number' && typeof s[1] === 'number') {
             return new Segment(new Point(s[0], s[1]));
        }
        console.warn("Unexpected segment data format, creating default segment:", s);
        return new Segment(new Point(0,0)); // Default fallback
    });
}


describe('Path Boolean Operations - Part 2', () => {
  it('#890', () => {
    let cp1_path1 = new Path(segmentsFromArray([ [676, 396.8], [445.78, 396.8], [426, 260] ]));
    cp1_path1.setClosed(true);
    let cp1_path2 = new Path(segmentsFromArray([ [672, 550.4, 0, 0, 31.74000000000001, 0], [633.5999999999999, 732.8, 0, 26.519999999999982] ]));
    cp1_path2.setClosed(true);
    let cp = new CompoundPath([cp1_path1, cp1_path2]);

    let p_segments = segmentsFromArray([ [732, 418, 0, 0, 0, 52.45802606694065], [676.3444534355956, 552.3444534355972, 34.385686865893945, -34.38568686589349], [630, 704], [400, 704], [542, 228] ]);
    let p = new Path(p_segments);
    p.setClosed(true);
    compareBoolean(() => (cp as any).subtract(p),
        'M491.6437,396.8l-45.8637,0l-19.78,-136.8l91.51486,50.07693z M676.40276,552.28613c19.70425,20.76653 -42.80276,205.5493 -42.80276,180.51387l27.46296,-130.44906l15.28149,-50.00648c0.01944,-0.01944 0.03887,-0.03888 0.0583,-0.05833z');

    let cp2_path1 = new Path(segmentsFromArray([[576, 396.8], [345.78, 396.8],  [249.6, 243.20000000000002]]));
    cp2_path1.setClosed(true);
    let cp2_path2 = new Path(segmentsFromArray([[624.84, 550.46], [672, 550.4], [729.6, 608]]));
    cp2_path2.setClosed(true);
    cp = new CompoundPath([cp2_path1, cp2_path2]);

    p_segments = segmentsFromArray([[323.0000000000002, 228.0000000000001, 0, 0, 51.95879291356505, 0], [410.9999999999998, 704.0000000000002], [-21.000000000000227, 703.9999999999998], [-21.692900774253758, 356.5535001949528]]);
    p = new Path(p_segments);
    p.setClosed(true);
    compareBoolean(() => (cp as any).subtract(p),
        'M576,396.8l-199.38152,0c-6.06278,-38.62456 -12.80947,-74.58601 -20.1433,-103.3058z M255.78013,253.06971l-6.18013,-9.86971l14.43275,6.79188z M624.84,550.46l47.16,-0.06l57.6,57.6z');
  });

  it('#899', () => {
    const path_segments = segmentsFromArray([[349.31714952528665, 176.97192499841802, 2.0667935742653185, -10.850610233997372, 0, 0], [308.23418424120047, 394.39737504104323, 0, 0, -0.3852007263769224, 2.0386172397749647], [273.60284923271973, 415.7138856106701, 9.194683617471242, 1.7373535056759692, 0, 0], [340.6967045975081, 152.3115389894092, -4.006231967752797, -3.6687868382265094, 5.694026309937783, 5.214418174126138], [349.72123243229134, 170.85618880187394, -0.36146393999291604, -6.612268801346318, 0.1110858449889065, 2.0320961120115726], [349.31714952528654, 176.97192499841861, 0.3852007263769224, -2.038617239775249, -2.0667935742656027, 10.850610233997315], [333.4126425432937, 153.58289639999975, -10.850610233997315, -2.0667935742653754, 10.850610233997372, 2.0667935742653754]]);
    const path = new Path(path_segments);
    path.setClosed(true);
    compareBoolean(() => path.unite(undefined as any),
        'M349.31715,176.97192l-41.08297,217.42545c-0.3852,2.03862 -25.43665,23.05386 -34.63134,21.31651c0,0 45.72613,-193.57408 61.79225,-248.85827c-4.42287,-6.99195 -6.99542,-14.22758 -1.98246,-13.27272c1.9865,0.37838 3.84798,1.03847 5.55095,1.93102c0.85247,-2.33202 1.44527,-3.46596 1.73311,-3.20238c5.69403,5.21442 8.66306,11.93238 9.02453,18.54465c0.10579,1.93513 -0.00703,3.88198 -0.35068,5.82386c-0.01706,0.09726 -0.03486,0.19455 -0.0534,0.29188z');
  });

  it('#936', () => {
    const p1_segments = segmentsFromArray([
        [437.02857142857147, 121.64285714285714], [390.3571428571429, 74.97142857142856], [390.3571428571429, 437.02857142857147], [437.02857142857147, 390.3571428571429], [74.97142857142862, 390.3571428571429], [121.6428571428572, 437.02857142857147], [121.64285714285714, 74.97142857142858], [74.97142857142859, 121.64285714285714]
    ]);
    const p1 = new Path(p1_segments);
    p1.setClosed(true);
    compareBoolean(() => p1.unite(undefined as any),
        'M390.35714,121.64286l0,268.71429l-268.71429,0l0,-268.71429z M121.64286,437.02857l-46.67143,-46.67143l46.67143,0z M390.35714,121.64286l0,-46.67143l46.67143,46.67143z M437.02857,390.35714l-46.67143,46.67143l0,-46.67143z M74.97143,121.64286l46.67143,-46.67143l0,46.67143z');

    const p2_segments = segmentsFromArray([
        [384.0884708724184, 194.49096034834812, -66.07592496222571, -39.741588860234515], [364.2895784370851, 164.00333956484477, 0, 0, 9.430248075502885, 76.52772155228502], [317.5090396516519, 384.0884708724184, 39.74158886023454, -66.07592496222564], [347.9966604351552, 364.2895784370851, 0, 0, -76.52772155228439, 9.430248075502845], [127.91152912758163, 317.50903965165196, 66.0759249622259, 39.74158886023463], [147.71042156291495, 347.9966604351553, 0, 0, -9.43024807550288, -76.52772155228509], [194.49096034834812, 127.91152912758156, -39.74158886023451, 66.07592496222576], [164.00333956484474, 147.7104215629149, 0, 0, 76.52772155228499, -9.430248075502845]
    ]);
    const p2 = new Path(p2_segments);
    p2.setClosed(true);
    compareBoolean(() => p2.unite(undefined as any),
        'M366.1932,184.4397c3.98163,62.97187 -9.38253,125.8453 -38.6329,181.75349c-62.97187,3.98163 -125.8453,-9.38253 -181.75349,-38.6329c-3.98163,-62.97187 9.38253,-125.8453 38.6329,-181.75349c62.97187,-3.98163 125.8453,9.38253 181.75349,38.6329z M164.00334,147.71042l30.48762,-19.79889c-3.53519,5.87774 -6.88622,11.84573 -10.05126,17.89528c-6.81387,0.43083 -13.62889,1.06475 -20.43636,1.90362z M147.71042,347.99666l-19.79889,-30.48762c5.87774,3.53519 11.84573,6.88622 17.89528,10.05126c0.43083,6.81387 1.06475,13.62889 1.90362,20.43636z M366.1932,184.4397c-0.43083,-6.81387 -1.06475,-13.62889 -1.90362,-20.43636l19.79889,30.48762c-5.87774,-3.53519 -11.84573,-6.88622 -17.89528,-10.05126z M347.99666,364.28958l-30.48762,19.79889c3.53519,-5.87774 6.88622,-11.84573 10.05126,-17.89528c6.81387,-0.43083 13.62889,-1.06475 20.43636,-1.90362z');
  });

  it('#923', () => {
    const p1_923 = PathConstructors.Circle(new Point(100, 100), 20);
    const p2_923 = PathConstructors.Circle(new Point(150, 100), 20);
    const cp_923 = new CompoundPath([p1_923, p2_923]);
    const p3_923 = PathConstructors.Circle(new Point(100, 100), 20);
    compareBoolean(() => (cp_923 as any).unite(p3_923),
        'M80,100c0,-11.04569 8.95431,-20 20,-20c11.04569,0 20,8.95431 20,20c0,11.04569 -8.95431,20 -20,20c-11.04569,0 -20,-8.95431 -20,-20z M130,100c0,-11.04569 8.95431,-20 20,-20c11.04569,0 20,8.95431 20,20c0,11.04569 -8.95431,20 -20,20c-11.04569,0 -20,-8.95431 -20,-20z');
  });

  it('#958', () => {
    const p1_958 = PathConstructors.Rectangle(new Rectangle(100, 200, 200, 20));
    const p2_958 = PathConstructors.Rectangle(new Rectangle(140, 100, 20, 20));
    const cp_958 = new CompoundPath([p1_958, p2_958]);
    const bounds_958 = cp_958.getBounds();
    const boundsPath_958 = bounds_958 ? PathConstructors.Rectangle(bounds_958) : new Path();
    compareBoolean(() => boundsPath_958.intersect(cp_958 as any),
        'M100,220l0,-20l200,0l0,20z M140,100l20,0l0,20l-20,0z');
  });

  it('#968', () => {
    const p1_segments_968 = segmentsFromArray([
        [352, 280, 0, -26.5, 0, 0], [352, 356, 0, 0, 0, 2.1999999999999886], [348, 360, 2.1999999999999886, 0, -72, 0]
    ]);
    const p1_968 = new Path(p1_segments_968);
    p1_968.setClosed(true);
    const p2_segments_968 = segmentsFromArray([
        [352, 344], [352, 356, 0, 0, 0, 2.1999999999999886], [348, 360, 2.1999999999999886, 0, 0, 0], [232, 360, 0, 0, -2.1999999999999886, 0]
    ]);
    const p2_968 = new Path(p2_segments_968);
    p2_968.setClosed(true);
    compareBoolean(() => p1_968.subtract(p2_968),
        'M352,280l0,64c0,0 -13.69105,1.79261 -31.82528,4.17778c-15.66463,-26.96617 31.82528,-89.12564 31.82528,-68.17778z');
  });

  it('#973', () => {
    const path_973 = PathConstructors.Ellipse(new Rectangle(new Point(100,100), new Size(150, 110)));
    const segments_973 = path_973.getSegments();
    if (segments_973 && segments_973.length > 3) {
        const pt1 = segments_973[1].getPoint();
        segments_973[1].setPoint(new Point(pt1.x, pt1.y + 60)); // Use setPoint

        const pt3 = segments_973[3].getPoint();
        segments_973[3].setPoint(new Point(pt3.x, pt3.y - 60)); // Use setPoint
    }

    const resolved_973 = path_973.resolveCrossings(); // resolveCrossings returns PathItem
    if (resolved_973 instanceof CompoundPath) {
        const orientation_973 = resolved_973.getPaths().map(function(child) {
            return child.isClockwise();
        });
        equals(() => orientation_973, [true, false, true],
                'children orientation after calling path.resolveCrossings()');
    } else {
        // Handle case where resolveCrossings returns a simple Path or is empty
        console.warn("#973: resolveCrossings did not return a CompoundPath as expected.");
        // Depending on the expected behavior for non-compound results, adjust the assertion.
        // For now, let the test fail if it's not a CompoundPath with the expected structure.
        expect(resolved_973 instanceof CompoundPath).toBe(true);
    }
  });

  it('#1036', () => {
    const line1_segments_1036 = segmentsFromArray([
        [[305.10732,101.34786],[0,0],[62.9214,0]], [[499.20274,169.42611],[-29.38716,-68.57004],[5.78922,13.50818]], [[497.75426,221.57115],[2.90601,-13.5614],[-9.75434,45.52027]], [[416.63976,331.65512],[31.9259,-30.40562],[-21.77284,20.73604]], [[350.00999,391.04252],[23.92578,-18.22917],[-23.33885,17.78198]], [[277.58633,431.59977],[27.45996,-10.67887],[-1.72805,0.67202]], [[251.51381,437.39367],[0,5.7145],[0,0]]
    ]);
    const line1_1036 = new Path(line1_segments_1036);

    const line2_segments_1036 = segmentsFromArray([
        [[547.00236,88.31161],[0,0],[-1.36563,0]], [[544.10541,85.41466],[1.29555,0.43185],[-9.83725,-3.27908]], [[509.34205,82.51771],[10.32634,-1.29079],[-10.20055,1.27507]], [[444.16075,97.00245],[7.10741,-4.06138],[-4.93514,2.82008]], [[431.12449,105.69328],[4.27047,-2.13524],[-14.94798,7.47399]], [[407.94892,175.22],[1.27008,-13.33587],[-3.16966,33.28138]], [[399.25808,279.51008],[-5.61644,-33.69865],[1.73417,10.40499]], [[415.19129,307.03107],[-5.98792,-8.16534],[2.74694,3.74583]], [[432.57297,328.75817],[-3.89061,-3.29206],[2.9716,2.51443]], [[442.71228,334.55206],[-3.01275,-2.46498],[2.39275,1.95771]], [[448.50617,341.79443],[-2.37502,-1.97918],[39.75954,33.13295]], [[578.86877,378.00626],[-51.65429,10.33086],[11.28627,-2.25725]], [[612.18365,366.41848],[-10.6547,4.26188],[3.10697,-1.24279]], [[617.97755,362.07306],[-3.19904,0],[0,0]]
    ]);
    const line2_1036 = new Path(line2_segments_1036);
    compareBoolean(() => line1_1036.intersect(line2_1036),
        'M424.54226,112.15158c32.89387,9.15202 61.28089,26.0555 74.66048,57.27453c5.78922,13.50818 1.45753,38.58364 -1.44848,52.14504c-8.75233,40.8442 -41.40003,72.54068 -71.07836,100.58668c-4.48065,-5.55963 -9.68976,-12.67924 -11.48461,-15.12676c-5.98792,-8.16534 -14.19904,-17.116 -15.93321,-27.52099c-5.61644,-33.69865 5.52118,-71.0087 8.69084,-104.29008c1.06648,-11.19805 6.14308,-47.34273 16.59334,-63.06842z');
  });

  it('#1054', () => {
    const p1_1054_segments = segmentsFromArray([
        [310, 170], [200, 170], [200, 350], [190, 350], [190, 160], [320, 160], [320, 350], [310, 350]
    ]);
    const p1_1054 = new Path(p1_1054_segments);
    p1_1054.setClosed(true);
    const p2_1054_segments = segmentsFromArray([
        [195, 165], [315, 165], [315, 350], [195, 350]
    ]);
    const p2_1054 = new Path(p2_1054_segments);
    p2_1054.setClosed(true);
    compareBoolean(() => p1_1054.unite(p2_1054),
        'M190,350l0,-190l130,0l0,190z');


    const cp_1054 = new CompoundPath();
    const cp_1054_path1 = new Path(segmentsFromArray([ [150, 100], [150, 150], [100, 150], [100, 100] ]));
    cp_1054_path1.setClosed(true);
    cp_1054.addChild(cp_1054_path1);

    const cp_1054_path2 = new Path(segmentsFromArray([ [200, 150], [200, 100], [220, 100], [220, 150] ]));
    cp_1054_path2.setClosed(true);
    cp_1054.addChild(cp_1054_path2);

    const p_1054_segments = segmentsFromArray([ [200, 100], [200, 150], [120, 150], [120, 100] ]);
    const p_1054 = new Path(p_1054_segments);
    p_1054.setClosed(true);
    compareBoolean(() => (cp_1054 as any).unite(p_1054),
        'M100,150l0,-50l120,0l0,50z');
  });

  it('#1059', () => {
    const p1_1059_segments = segmentsFromArray([
        [428.48408954611784, 189.03444010371618, 0, 0, -21.46171522996096, 0], [369.18465116477694, 213.5984519858447, 16.376007921419017, -16.376007921419017, 0, 0], [209.1846511647769, 213.5984519858447, 0, 0, 16.376007921419017, -16.376007921419017], [268.48408954611784, 189.03444010371618, -21.46171522996096, 0, 0, 0]
    ]);
    const p1_1059 = new Path(p1_1059_segments);
    p1_1059.setClosed(true);
    const p2_1059_segments = segmentsFromArray([
        [369.18465470031083, 213.59844845031083, 0, 0, -32.75201584283798, 32.752015842838006], [369.18465470031083, 332.1973252129927, -32.752015842838034, -32.75201584283809, 0, 0], [209.1846547003108, 332.1973252129927], [209.1846547003108, 213.59844845031083, -32.75201584283798, 32.752015842838006, 0, 0]
    ]);
    const p2_1059 = new Path(p2_1059_segments);
    p2_1059.setClosed(true);
    compareBoolean(() => p1_1059.unite(p2_1059),
        'M428.48409,189.03444c-21.46172,0 -42.92343,8.188 -59.29943,24.56401c-32.75202,32.75202 -32.75202,85.84686 0,118.59888l-160,0c0,0 -32.75202,-85.84686 0,-118.59888l0,0c16.37601,-16.37601 37.83772,-24.56401 59.29944,-24.56401z');
  });

  it('#1075', () => {
    const p1_1075_segments = segmentsFromArray([
        [150, 120], [150, 85], [178, 85], [178, 110], [315, 110], [315, 85], [342, 85], [342, 120],
    ]);
    const p1_1075 = new Path(p1_1075_segments);
    p1_1075.setClosed(true);
    const p2_1075_segments = segmentsFromArray([
        [350, 60], [350, 125], [315, 125], [315, 85], [178, 85], [178, 125], [140, 125], [140, 60]
    ]);
    const p2_1075 = new Path(p2_1075_segments);
    p2_1075.setClosed(true);

    compareBoolean(() => p1_1075.unite(p2_1075),
        'M140,125l0,-65l210,0l0,65l-35,0l0,-5l-137,0l0,5z M315,85l-137,0l0,25l137,0z');
  });

  it('#1091', () => {
    const data_1091 = [
        'M91.24228100000002,45.622281000000015v396.89171899999997c0,25.195925999999986 -20.426355000000015,45.622281000000044 -45.62000000000001,45.622281000000044c-25.198207000000007,0 -45.620000000000005,-20.42407400000002 -45.620000000000005,-45.622281000000044v-396.889438c0,-25.19820700000001 20.421792999999997,-45.62228100000001 45.620000000000005,-45.62228100000001c25.193644999999997,0 45.617719000000015,20.424074000000015 45.62000000000001,45.62000000000001z0',
        'M223.67029800000003,488.13628100000005h-178.05029800000003c-25.198207000000004,0 -45.620000000000005,-20.426355000000058 -45.620000000000005,-45.622281000000044v0c0,25.198207000000025 20.421793,45.622281000000044 45.620000000000005,45.622281000000044c25.193645000000004,0 45.620000000000005,-20.426355000000058 45.620000000000005,-45.622281000000044v-45.620000000000005h132.430298v0c-25.193645000000004,0 -45.620000000000005,20.42407400000002 -45.620000000000005,45.620000000000005c0.0022810000000106356,25.198207000000025 20.426355,45.622281000000044 45.620000000000005,45.622281000000044',
        'M225.369643,488.13628100000005h-1.6993449999999939c1.0013589999999795,0 2.0004369999999767,-0.006843000000003485 2.9995150000000024,-0.01824800000002824c-0.4311089999999922,0.011404999999967913 -0.8644990000000234,0.01824800000002824 -1.3001700000000085,0.01824800000002824z',
        'M45.62228100000001,488.13628100000005c-25.198207000000007,0 -45.620000000000005,-20.426355000000058 -45.620000000000005,-45.622281000000044c0,-25.193644999999947 20.421792999999997,-45.620000000000005 45.620000000000005,-45.620000000000005h45.62000000000001v45.620000000000005c-0.0022809999999964248,25.198207000000025 -20.426355000000015,45.622281000000044 -45.62000000000001,45.622281000000044z',
        'M223.67029800000003,91.242281h-132.430298v-45.620000000000005c0,-25.195926000000004 -20.424074000000005,-45.62228100000001 -45.620000000000005,-45.62228100000001h179.667527c0.41742300000001364,0 0.8325649999999882,0.004561999999999999 1.2477069999999912,0.015967000000000002c-0.9511770000000013,-0.011405000000000002 -1.9137589999999989,-0.015967000000000002 -2.867217000000011,-0.015967000000000002c-25.193645000000004,0 -45.620000000000005,20.424074 -45.620000000000005,45.62228100000001c0.0045619999999928496,25.195926 20.42863600000004,45.620000000000005 45.622281000000044,45.620000000000005z',
        'M91.24000000000001,91.242281h-45.620000000000005c-25.198207000000004,0 -45.620000000000005,-20.424074000000005 -45.620000000000005,-45.620000000000005c0,-25.195926000000004 20.421793,-45.62228100000001 45.620000000000005,-45.62228100000001v0c25.193645000000004,0 45.620000000000005,20.424074 45.620000000000005,45.62228100000001z',
        'M226.66981300000003,488.118033c24.59146100000001,-0.6888619999999719 44.31982999999997,-20.841497000000004 44.31982999999997,-45.604033000000015c0,-25.193644999999947 -20.42407400000002,-45.620000000000005 -45.620000000000005,-45.620000000000005h-1.6993449999999939c80.626507,0 139.143281,-64.27173699999997 139.143281,-152.827v0c0,25.198207000000025 20.42407400000002,45.620000000000005 45.622281000000044,45.620000000000005c25.193644999999947,0 45.620000000000005,-20.42179299999998 45.620000000000005,-45.620000000000005c0,138.080335 -97.54012200000005,242.46573800000004 -227.38604700000002,244.05103300000002z',
        'M223.67029800000003,488.13628100000005v0c-25.193645000000004,0 -45.620000000000005,-20.426355000000058 -45.620000000000005,-45.622281000000044c0,-25.193644999999947 20.426355,-45.620000000000005 45.620000000000005,-45.620000000000005v0h1.6993450000000223c25.193645000000004,0 45.620000000000005,20.42407400000002 45.620000000000005,45.620000000000005c0,24.76253600000001 -19.726088000000004,44.91517100000004 -44.319829999999996,45.604033000000015c-0.9967969999999866,0.011404999999967913 -1.9958750000000407,0.01824800000002824 -2.999515000000031,0.01824800000002824z',
        'M454.05586000000005,244.06928100000002c0,-25.198206999999996 -20.42407400000002,-45.617718999999994 -45.620000000000005,-45.617718999999994c-25.198207000000025,0 -45.622281000000044,20.421793000000008 -45.622281000000044,45.617718999999994v0c0,-88.55298200000001 -58.516774,-152.827 -139.143281,-152.827v0h1.617229000000009c25.198206999999996,0 45.62228099999999,-20.424074000000005 45.62228099999999,-45.620000000000005c0,-24.778503 -19.755740999999972,-44.942543 -44.372292999999985,-45.606314000000005c129.918917,1.5123030000000002 227.51834500000004,105.922797 227.51834500000004,244.053314z',
        'M225.28980800000002,91.242281h-1.617229000000009c-25.193645000000004,0 -45.620000000000005,-20.424074000000005 -45.620000000000005,-45.620000000000005c0,-25.195926000000004 20.426355,-45.62228100000001 45.620000000000005,-45.62228100000001c0.9534580000000119,0 1.9160400000000095,0.006843000000000001 2.867217000000011,0.015967000000000002c24.618833000000024,0.6637710000000001 44.37229300000001,20.827811 44.37229300000001,45.60631400000001c0,25.195926 -20.426355,45.620000000000005 -45.622281000000015,45.620000000000005z',
        'M408.43586000000005,289.687c-25.198207000000025,0 -45.622281000000044,-20.42179299999998 -45.622281000000044,-45.620000000000005v0v0c0,-25.198206999999996 20.42407400000002,-45.617718999999994 45.622281000000044,-45.617718999999994c25.193644999999947,0 45.620000000000005,20.421793000000008 45.620000000000005,45.617718999999994v0v0c0,25.198207000000025 -20.42407400000002,45.620000000000005 -45.620000000000005,45.620000000000005z'
    ];
    let res_1091 = new CompoundPath();

    for (let i = 0; i < data_1091.length; i++) {
        const path_1091 = Path.fromSVG(data_1091[i]);
        // path_1091.remove(); // Not needed
        const prev_1091 = res_1091;
        res_1091 = (res_1091 as any).unite(path_1091);
        // prev_1091.remove(); // Not needed
    };
    compareBoolean(() => res_1091,
        'M91.24228,396.894h132.42802c-25.19365,0 -45.62,20.42407 -45.62,45.62c0,-25.19364 20.42635,-45.62 45.62,-45.62c80.62581,0 139.14228,-64.27063 139.14328,-152.82472l0,-0.00228c-0.001,-88.55097 -58.51636,-152.82351 -139.141,-152.82472l-0.00228,0c-25.1926,-0.00123 -45.61772,-20.42483 -45.61772,-45.62c0,-25.1955 20.42566,-45.62158 45.61871,-45.62228h1.61624c0.4166,0 0.83093,0.00454 1.24526,0.0159c0.00234,0.00002 0.00467,0.00004 0.00701,0.00007c0.00058,0.00002 0.00116,0.00003 0.00173,0.00005c129.91593,1.5144 227.51285,105.92259 227.51433,244.05012c0,0.00029 0,0.00057 0,0.00086c0,0.00012 0,0.00024 0,0.00036l0,0.00192c-0.00107,138.0792 -97.54084,242.46347 -227.38605,244.04875c-0.43111,0.0114 -0.8645,0.01825 -1.30017,0.01825h-1.69934c-12.59632,0 -24.00091,-5.10618 -32.25663,-13.36168c8.2555,8.25572 19.65987,13.36168 32.25663,13.36168l-178.04574,0c-0.00076,0 -0.00152,0 -0.00228,0c-0.00076,0 -0.00152,0 -0.00228,0h0c-25.19716,-0.00123 -45.61772,-20.42483 -45.61772,-45.62228v-396.88944c0,-25.19821 20.42179,-45.62228 45.62,-45.62228c14.89455,0 28.12203,7.13863 36.44812,18.18156c-8.3258,-11.04405 -21.55413,-18.18384 -36.4504,-18.18384h178.04802c-25.19365,0 -45.62,20.42407 -45.62,45.62228c0.00456,25.19593 20.42864,45.62 45.62228,45.62l-132.42802,0zM45.62,488.13628c-25.19821,0 -45.62,-20.42407 -45.62,-45.62228c0,25.19593 20.42179,45.62228 45.62,45.62228zM226.51682,0.01575c-0.93686,-0.01114 -1.88465,-0.01567 -2.82377,-0.01575c0.93909,0.0001 1.88688,0.0068 2.82377,0.01575zM362.81358,244.06928c0.00123,25.19716 20.42483,45.61772 45.62228,45.61772c-25.19745,0 -45.62105,-20.42056 -45.62228,-45.61772z');
  });

  it('#1109', () => {
    const segmentsData_1109 = [
        [274.616046379547, 215.30654471841746], [296.47810618021146, 202.68940186127458], [297.0266776087829, 160.32607960213838], [260.5870762798793, 181.99677727655697], [260.5870762798793, 207.20554804067655],
    ];
    const segments_1109 = segmentsFromArray(segmentsData_1109);

    const path_1109_rect = PathConstructors.Rectangle(new Rectangle(200, 100, 200, 200));
    const path_1109_segments = new Path(segments_1109);
    path_1109_segments.setClosed(true);
    const p1_1109 = new CompoundPath([path_1109_rect, path_1109_segments]);

    const p2_1109_rect = PathConstructors.Rectangle(new Rectangle(210, 110, 180, 180));
    const p2_1109_segments_path = new Path(segments_1109); // Reuse segments
    p2_1109_segments_path.setClosed(true);
    const p2_1109 = new CompoundPath([p2_1109_rect, p2_1109_segments_path]);

    const p3SegmentsData_1109 = [...segmentsData_1109];
    p3SegmentsData_1109.push(p3SegmentsData_1109.shift()!);
    const p3_1109_segments = segmentsFromArray(p3SegmentsData_1109);
    const p3_1109_rect = PathConstructors.Rectangle(new Rectangle(210, 110, 180, 180));
    const p3_1109_segments_path = new Path(p3_1109_segments);
    p3_1109_segments_path.setClosed(true);
    const p3_1109 = new CompoundPath([p3_1109_rect, p3_1109_segments_path]);

    const p4SegmentsData_1109 = [...segmentsData_1109]; // Start with original order again
    // Convert spike points to Segment objects before splicing
    const spikeSegments = segmentsFromArray([
        [260.5870762798793, 200], [265.5870762798793, 201], [260.5870762798793, 202]
    ]);
    p4SegmentsData_1109.splice(3, 0, ...spikeSegments); // Splice Segment objects
    const p4_1109_segments = p4SegmentsData_1109; // Already Segment objects
    const p4_1109_rect = PathConstructors.Rectangle(new Rectangle(210, 110, 180, 180));
    const p4_1109_segments_path = new Path(p4_1109_segments);
    p4_1109_segments_path.setClosed(true);
    const p4_1109 = new CompoundPath([p4_1109_rect, p4_1109_segments_path]);

    compareBoolean(() => (p1_1109 as any).unite(p2_1109),
        'M200,300v-200h200v200zM274.61605,215.30654l21.86206,-12.61714l0.54857,-42.36332l-36.4396,21.6707v25.20877z');
    compareBoolean(() => (p1_1109 as any).unite(p3_1109),
        'M200,300v-200h200v200zM274.61605,215.30654l21.86206,-12.61714l0.54857,-42.36332l-36.4396,21.6707v25.20877z');
    compareBoolean(() => (p1_1109 as any).unite(p4_1109),
        'M200,300v-200h200v200zM265.58708,201l-5,1v5.20555l14.02897,8.101l21.86206,-12.61714l0.54857,-42.36332l-36.4396,21.6707v18.00322z');
  });

  it('#1123 first part', () => {
    const p1_1123a_segments = segmentsFromArray([
        [29.562573408343212, 132.54192488999095, 0, 0, -1.417935581083043, 0.174100597711913], [2.5662795205536213, 124.83546947214427, 13.887634830511104, -1.705187144644185, 0, 0], [18.447017946814753, 122.88555997766193, 0, 0, 13.88763483051116, -1.7051871446442135], [45.443311834604344, 130.5920153955086, -1.417935581083043, 0.17410059771188457, 0, 0]
    ]);
    const p1_1123a = new Path(p1_1123a_segments);
    p1_1123a.setClosed(true);
    const p2_1123a_segments = segmentsFromArray([
        [5.684341886080802e-14, 132.07000000000002, 12.910000000000025, 27.075000000000017, 21.125, -21.119999999999976], [44.59500000000003, 130.54000000000005, 0, 2.3300000000000125, 4.816669792192272, -4.501887430254385], [56.887403180177614, 116.74936916538223, -3.66267533741933, 4.517228939026069, 0.002528361414420033, 50]
    ]);
    const p2_1123a = new Path(p2_1123a_segments);
    p2_1123a.setClosed(true);
    compareBoolean(() => p1_1123a.intersect(p2_1123a),
        'M29.56257,132.54192c-1.1465,0.14077 -9.00925,-6.09934 -19.31903,-7.59213c2.44054,-1.04008 4.85728,-1.65337 7.21093,-1.94237c13.88763,-1.70519 25.57836,7.88056 26.99629,7.70646zM44.75533,130.3897c0.31974,0.14538 0.55147,0.21908 0.68798,0.20232l-0.99255,0.12187c0.09534,-0.01171 0.14423,-0.06753 0.14423,-0.17388c0.05357,-0.05007 0.10701,-0.10017 0.16033,-0.1503z');
  });

  it('#1123 second part', () => {
    const p1_1123b = PathConstructors.Rectangle(new Rectangle(100, 100, 100, 100));
    const p2_1123b = PathConstructors.Rectangle(new Rectangle(120, 120, 60, 60));
    compareBoolean(() => (p1_1123b.subtract(p2_1123b) as Path).subtract(p2_1123b),
        'M100,200v-100h100v100zM180,180v-60h-60v60z');
  });

  it('#1221', () => {
    const rect1_1221 = PathConstructors.Rectangle(new Rectangle(new Point(100, 100), new Size(200, 200)));
    const circle_1221 = PathConstructors.Circle(new Point(100, 100), 100);

    // Papyrus2D subtract doesn't have trace option, results might differ from paper.js test
    compareBoolean(() => rect1_1221.subtract(circle_1221),
        'M100,300v-100c55.22847,0 100,-44.77153 100,-100h100v200z'); // Using the expected result from trace: true as it's more likely correct geometry


    const blob_1221 = Path.fromSVG("M534,273C171.7,111,60.5,117.1,30,158c-40.5,54.3,31.5,210.2,111,222c60.8,9,88-71.9,159-66c81.6,6.8,99.6,118.3,179,128c33.8,4.1,83.1-9.7,150-90");
    const rect2_1221 = PathConstructors.Rectangle(new Rectangle(new Point(150, 100), new Size(300, 300)));

    // Papyrus2D subtract doesn't have trace option
    compareBoolean(() => blob_1221.subtract(rect2_1221),
        'M629,352c-66.9,80.3 -116.2,94.1 -150,90c-29.3237,-3.58237 -50.27279,-21.04968 -69.14384,-42h40.14384v-163.46967c26.38045,11.07937 54.34931,23.21157 84,36.46967zM141,380c-79.5,-11.8 -151.5,-167.7 -111,-222c14.74013,-19.76627 48.32873,-31.40457 120,-19.86844v242.56712c-2.92033,-0.01709 -5.91697,-0.24231 -9,-0.69867z');

    const rect3_1221 = PathConstructors.Rectangle(new Rectangle(new Point(150, 100), new Size(300, 150)));

    // Papyrus2D subtract doesn't have trace option
    compareBoolean(() => blob_1221.subtract(rect3_1221),
        'M629,352c-66.9,80.3 -116.2,94.1 -150,90c-79.4,-9.7 -97.4,-121.2 -179,-128c-71,-5.9 -98.2,75 -159,66c-79.5,-11.8 -151.5,-167.7 -111,-222c14.74013,-19.76627 48.32873,-31.40457 120,-19.86844v111.86844h300v-13.46967c26.38045,11.07937 54.34931,23.21157 84,36.46967z');

    const rect4_1221 = PathConstructors.Rectangle(new Rectangle(new Point(200, 200), new Size(400, 200)));
    const line_1221 = PathConstructors.Line(new Point(400, 300), new Point(400, 600));

    const division_1221 = line_1221.divide(rect4_1221);
    if (division_1221 instanceof CompoundPath) {
        equals(() => division_1221.getPaths().length, 2);
        compareBoolean(() => division_1221.getPaths()[0], 'M400,300v100');
        compareBoolean(() => division_1221.getPaths()[1], 'M400,400v200');
    } else if (division_1221 instanceof Path) {
        // Handle case where divide returns a single Path (e.g., line outside rect)
        // This part depends on the expected behavior when the line doesn't intersect
        // or only touches the rectangle. Assuming the test expects a CompoundPath.
         console.warn("#1221: divide did not return a CompoundPath as expected.");
         expect(division_1221 instanceof CompoundPath).toBe(true); // Force failure if not CompoundPath
    } else {
         console.warn("#1221: divide returned unexpected type.");
         expect(division_1221).toBeInstanceOf(PathItem); // Basic check
    }
  });
});
