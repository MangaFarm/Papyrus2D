# Papyrus2D プロジェクト実装ルール

Papyrus2Dはpaper.jsから幾何部分を抽出するプロジェクトです。
とにかくpaper.jsのコードを優先するようにしてください。/paper.js/にあります。

## 基本方針
1. **コード流用と改良**：
   - バグを減らすため、まず paper.js ディレクトリから既存のコードベースを流用する
   - 既存コードの動作を理解し、基本的なアルゴリズムと構造を維持する
   - ただし、流用する際に透明性や保守性に問題があるコードは改良する
   - コードの流用を行う際には、省略は決してしない
   - テストもなるべくpaper.jsに従う
   - 何か情報を得たら、paper_js.mdに記録していく

2. **グローバル状態の排除**：
   - Paper.js の PaperScope のようなグローバル状態管理は使用しない
   - すべてのオブジェクトは明示的に作成・管理する
   - 隠れた依存関係や副作用を避ける

3. **イミュータブル設計**：
   - 基本クラス（Point, Rectangle, Matrix など）はイミュータブルに設計する
   - 変更操作は新しいオブジェクトを返す形で実装する
   - 副作用を避け、予測可能なAPIを設計する

4. **機能の絞り込み**：
   - レンダリングやDOM関連のコードは完全に除去する
   - 純粋な幾何学計算と操作のみに機能を絞る
   - 必要最小限のコードで高性能な幾何学演算ライブラリを目指す

## プロジェクトドキュメント

プロジェクトを理解し実装を進めるには、まず以下のドキュメントを順に参照してください。すべてのドキュメントは `documents/` ディレクトリに格納されています。

### 主要ドキュメントの説明

1. **implementation_plan.md**
   - プロジェクトの概要、目的、設計原則を詳細に記述

2. **todo_list.md**
   - 具体的な実装タスクのチェックリスト

3. **paper_js.md**
   - paper.jsの実装についてのメモ。paper.jsについて調べたら、随時追記していってください。参考にしたソースの場所などを簡潔に。

## テスト実行

  % npm test filename

テストの際はなるべくpaper.jsの実装を正とし、paper.jsとアルゴリズムが等しいならテストコードを疑ってください。
何らかの即値を使いたいときは、pythonで計算するなどしてなるべくもっともらしい値を使ってください。

## タスク完了前

タスク完了前にtodoの更新を行ってください。
